<?php
namespace Sapphirecat\Signal;

use DomainException;

/** Signal handler registry. */
class Router
{
    /** Signal handler management.
     *
     * @var integer $seq Unique portion of the unique ID for signal handlers.
     * @var string $tag Fixed per-instance portion of the unique ID for signal
     * handlers.
     * @var array[callable] $stack Active signal handlers.
     */
    private $seq = 0;
    private $tag;
    private $stack = array();

    /** Constructor. */
    function __construct()
    {
        $this->tag = uniqid('.', true);
    }

    /** Add a signal handler to the active list.
     *
     * The newly-added signal handler will be first in line for receiving
     * signals.
     *
     * @param callable $handler Signal dispatching fuction to be invoked when a
     * signal is sent.
     * @param array[string] $signals Signal class names to which this
     * dispatching function applies.  Only these classes, when thrown, will
     * invoke this handler.
     * @return ScopeGuard Value that removes the signal handler when destroyed.
     */
    public function add(callable $handler, array $signals=null)
    {
        $id = ++$this->seq . $this->tag;
        $this->stack[$id] = [$handler, $signals];
        return new CallScopeGuard([$this, 'remove'], [$id]);
    }

    /** Remove a signal handler from the active list.
     *
     * @param string $id ID generated by the add() function.
     * @return void
     * @throws DomainException if an invalid $id is given.
     */
    public function remove($id)
    {
        if (! isset($this->stack[$id])) {
            throw new DomainException("Unknown or previously unregistered handler: $id");
        }

        unset($this->stack[$id]);
    }

    /** Check a signal for a match.
     *
     * Used when a list of signal class names is provided to add().
     *
     * @param SignalInterface $signal Signal object being checked.
     * @param array[string] $classes List of permitted signal class names.
     * @return boolean TRUE when the signal matches a signal in the list, FALSE
     * otherwise.
     */
    protected function matchesSignal(SignalInterface $signal, $classes) {
        foreach ($classes as $class) {
            if ($signal instanceof $class) {
                return true;
            }
        }
        return false;
    }


    /** Send a signal to the handlers.
     *
     * Returns if all handlers decline to handle the signal.
     *
     * @param Restarts $restarts Active restarts that may be invoked by a signal
     * handler.
     * @param SignalInterface $signal Signal being sent.
     * @return void
     * @throws RestartInterface to transfer control when a restart is invoked by
     * a handler.  This exception SHOULD NOT be caught except by code that
     * defined the restart.
     */
    public function invoke(Restarts $restarts, SignalInterface $signal)
    {
        foreach (array_reverse(array_values($this->stack)) as $handlerInfo) {
            list($handler, $signals) = $handlerInfo;
            if ($signals === null || $this->matchesSignal($signal, $signals)) {
                call_user_func($handler, $restarts, $signal);
            }
        }
    }
}
